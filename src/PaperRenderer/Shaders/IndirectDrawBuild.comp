#version 460
#extension GL_GOOGLE_include_directive : require
#include "Common.glsl"

layout (local_size_x = 128) in;

//----------UNIFORM INPUT DATA----------//

layout(std430, set = 0, binding = 0) uniform InputData
{
    vec4 camPos;
    mat4 projection;
    mat4 view;
    uint64_t materialDataPtr;
    uint64_t modelDataPtr;
    uint objectCount;
    bool doCulling;
} inputData;

//----------PER RENDER PASS INSTANCE DATA (also the main input data)----------//

struct RenderPassInstance
{
    uint modelInstanceIndex;
    uint LODsMaterialDataOffset;
    bool isVisible;
};

layout(scalar, set = 0, binding = 2) readonly buffer RenderPassInstances
{
    RenderPassInstance datas[];
} inputObjects;

//mesh groups
layout(scalar, buffer_reference) readonly buffer MeshGroupOffsets
{
    uint offsets[]; //count grabbed from model and is assumed to be in order
};

struct MaterialMeshGroup
{
    uint64_t drawCommandAddress;
    uint64_t matricesBufferAddress;
};

layout(scalar, buffer_reference) readonly buffer LODsMaterialMeshGroups
{
    MaterialMeshGroup datas[]; //count grabbed from model and is assumed to be in order
};

//mesh group data
struct IndirectDrawData
{
    uint64_t drawCommandAddress;
    uint64_t matricesBufferAddress;
};

layout(scalar, buffer_reference) readonly buffer IndirectDrawDatas
{
    IndirectDrawData datas[]; //count grabbed from model and is assumed to be in order
};

//----------DRAW COMMANDS AND MATRICES----------//

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
    float padding;
};

layout(scalar, buffer_reference) buffer DrawCommands
{
    DrawCommand command;
} drawCommands;


layout(scalar, buffer_reference) writeonly buffer MatricesBuffer
{
    mat4 matrices[];
};

//----------ENTRY POINT----------//

void main()
{
    const uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }

    const RenderPassInstance inputInstance = inputObjects.datas[gID];
    const ModelInstance modelInstance = inputInstances.modelInstances[inputInstance.modelInstanceIndex]; //should be at index 0 with the offset derrived from inputInstance

    const Model model = InputModel(inputData.modelDataPtr + modelInstance.modelDataOffset).model; //should be at index 0 with the offset derrived from modelInstance

    const mat4 modelMatrix = getModelMatrix(modelInstance);

    //culling
    bool visible = inputInstance.isVisible;
    if(inputData.doCulling && visible)
    {
        visible = isInBounds(modelInstance, model, modelMatrix, inputData.projection, inputData.view);
    }
    
    //indirect draw build if visible
    if(visible)
    {
        //get LOD
        const uint lodLevel = min(getLODLevel(modelInstance, model, inputData.camPos), model.lodCount - 1);

        const ModelLOD modelLOD = ModelLODs(inputData.modelDataPtr + uint64_t(modelInstance.modelDataOffset + model.lodsOffset)).LODs[lodLevel];
        const uint meshGroupOffset = MeshGroupOffsets(inputData.materialDataPtr + uint64_t(inputInstance.LODsMaterialDataOffset)).offsets[lodLevel];

        //loop through LOD meshes (1 mesh to 1 material)
        for(uint matIndex = 0; matIndex < modelLOD.materialCount; matIndex++)
        {
            const MaterialMeshGroup materialMeshGroup = LODsMaterialMeshGroups(inputData.materialDataPtr + uint64_t(inputInstance.LODsMaterialDataOffset + meshGroupOffset)).datas[matIndex];

            //instance count
            uint writeIndex = atomicAdd(DrawCommands(materialMeshGroup.drawCommandAddress).command.instanceCount, 1);

            //output objects
            MatricesBuffer(materialMeshGroup.matricesBufferAddress).matrices[writeIndex] = modelMatrix;
        }
    }
}