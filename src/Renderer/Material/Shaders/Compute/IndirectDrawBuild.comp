#version 460

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require //for pointer arithmetic

layout (local_size_x = 128) in;

//----------GLOBAL INPUT DATA----------//

layout(std430, buffer_reference, buffer_reference_align = 8) PreprocessBufferReference;
layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer ASInstances;
layout(std430, buffer_reference, buffer_reference_align = 8) BLASReference;

struct CullingData
{
    vec4 frustum; //(left, right, top, bottom)
    vec2 zPlanes; //(near, far)
};

layout(std430, set = 0, binding = 0) uniform InputData
{
    PreprocessBufferReference bufferReference;
    ASInstances asInstancesBufferReference;
    vec4 camPos;
    mat4 projection;
    mat4 view;
    uint objectCount;
    CullingData cullingData;
} inputData;

struct InputObject
{
    vec4 position; //w hold sphere extent
    mat4 rotation;
    vec4 scale;
    uint lodCount;
    uint lodOffset;
    BLASReference blasReference;
};

layout(std430, set = 0, binding = 1) readonly buffer InputObjects
{
    InputObject objects[];
} inputObjects;

struct LODMesh
{
    uint vboOffset;
    uint vboSize;
    uint iboOffset;
    uint iboSize;

    uint drawCountsOffset;
    uint drawCommandsOffset;
    uint outputObjectsOffset;
    uint padding;
};

layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer LODMeshes
{
    LODMesh meshes[];
};

layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer LOD
{
    uint meshCount;
    uint meshesLocationOffset;
};

layout(std430, buffer_reference, buffer_reference_align = 8) buffer DrawCounts
{
    uint count;
};

struct DrawCommand //20 bytes
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer DrawCommands
{
    DrawCommand commands[];
};

struct OutputObject
{
    mat4 model;
    mat4 objectTransform;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer OutputObjects
{
    OutputObject objects[];
};

struct AccelerationStructureInstance
{
    mat3x4 transform;
    uint instanceCustomIndexAndMask;//24 + 8;
    uint instanceShaderBindingTableRecordOffsetAndFlags;//24 + 8;
    uint64_t accelerationStructureReference;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer ASInstances
{
    AccelerationStructureInstance objects[];
}; 

//----------FUNCTIONS----------//

bool isInBounds(InputObject object)
{
    //grab sphere cull data from the object buffer
	vec4 sphereBounds = object.position;

	vec3 center = sphereBounds.xyz;
	center = (inputData.view * vec4(center, 1.0)).xyz;
	float radius = 0.0;//sphereBounds.w;

	bool visible = true;

	//frustrum culling
	visible = visible && center.z * inputData.cullingData.frustum.y - abs(center.x) * inputData.cullingData.frustum.x > -radius;
	visible = visible && center.z * inputData.cullingData.frustum.w - abs(center.y) * inputData.cullingData.frustum.z > -radius;
    //visible = visible && center.z + radius > inputData.zPlanes.x && center.z - radius < inputData.zPlanes.y;

	return visible;
}

uint getLODLevel(InputObject object)
{
    float cameraDistance = length(object.position.xyz - inputData.camPos.xyz);
    float worldSize = 50.0;
    uint lodLevel = uint(floor(inversesqrt(worldSize) * sqrt(cameraDistance)));

    return lodLevel;
}

DrawCommand buildDrawCommand(LODMesh lodData, uint writeIndex)
{
    DrawCommand drawCommand;
    drawCommand.indexCount = lodData.iboSize;
    drawCommand.instanceCount = 1;
    drawCommand.firstIndex = lodData.iboOffset;
    drawCommand.vertexOffset = int(lodData.vboOffset);
    drawCommand.firstInstance = writeIndex;

    return drawCommand;
}

OutputObject buildOutputObject(mat4 modelMatrix)
{
    OutputObject outputObject;
    outputObject.model = modelMatrix;
    outputObject.objectTransform = inputData.projection * inputData.view * modelMatrix;

    return outputObject;
}

const uint VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x01000000;

AccelerationStructureInstance buildASInstance(InputObject object, uint customIndex)
{
    mat4 transformMatrix = mat4(
        vec4(object.scale.x, 0.0, 0.0, 0.0),
        vec4(0.0, object.scale.y, 0.0, 0.0),
        vec4(0.0, 0.0, object.scale.z, 0.0),
        vec4(0.0, 0.0, 0.0, 1.0));
    transformMatrix = inputData.view * transformMatrix * object.rotation; //apply rotation before translation  TODO ROTATION IS BROKEN BECAUSE IM A RETARD WHO DOESNT KNOW LINEAR ALGEBRA

    mat3x4 instTransform;
    instTransform[0] = vec4(transformMatrix[0].xyz, object.position.x);
    instTransform[1] = vec4(transformMatrix[1].xyz, object.position.y);
    instTransform[2] = vec4(transformMatrix[2].xyz, object.position.z);

    //I HAVE NO IDEA HOW WELL THIS CODE WILL ACTUALLY HOLD UP CONSIDERING I BARELY KNOW HOW TO USE BITWISE OPERATORS

    //custom index and mask
    uint instanceCustomIndex = customIndex;    // value to merge in non-masked bits
    uint mask = 0xAA000000;    // value to merge in masked bits
    uint bitmask0 = 0xFF000000; // 1 where bits from mask should be selected; 0 where from instanceCustomIndex.
    uint instanceCustomIndexAndMask = instanceCustomIndex ^ ((instanceCustomIndex ^ mask) & bitmask0);

    //binding table record offset and flags
    uint instanceShaderBindingTableRecordOffset = 0;    // value to merge in non-masked bits
    uint flags = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;    // value to merge in masked bits
    uint bitmask1 = 0xFF000000; // 1 where bits from flags should be selected; 0 where from instanceShaderBindingTableRecordOffset.
    uint instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffset ^ ((instanceShaderBindingTableRecordOffset ^ flags) & bitmask1);

    AccelerationStructureInstance structureInstance;
    structureInstance.transform = instTransform;
    structureInstance.instanceCustomIndexAndMask = instanceCustomIndexAndMask;
    structureInstance.instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffsetAndFlags;
    structureInstance.accelerationStructureReference = uint64_t(object.blasReference);

    return structureInstance;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    InputObject inputObject = inputObjects.objects[gID];

    //ray tracing bits
    ASInstances outputInstances = inputData.asInstancesBufferReference;
    outputInstances.objects[gID] = buildASInstance(inputObject, gID);

    if(isInBounds(inputObject))
    {   
        //get LOD
        uint lodLevel = min(getLODLevel(inputObject), inputObject.lodCount - 1);
        LOD lod = LOD(uint64_t(inputData.bufferReference) + inputObject.lodOffset + lodLevel * 8);
        LODMeshes meshesArray = LODMeshes(uint64_t(inputData.bufferReference) + lod.meshesLocationOffset);

        //loop through LOD meshes and create draw calls with counts
        for(uint i = 0; i < lod.meshCount; i++)
        {
            //draw counts and output objects
            DrawCounts drawCounts = DrawCounts(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].drawCountsOffset);
            DrawCommands outputCommands = DrawCommands(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].drawCommandsOffset);
            OutputObjects outputObjects = OutputObjects(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].outputObjectsOffset);

            uint writeIndex = atomicAdd(drawCounts.count, 1);

            //draw commands
            outputCommands.commands[writeIndex] = buildDrawCommand(meshesArray.meshes[i], writeIndex);

            //output objects
            mat4 modelMatrix = mat4(
                vec4(inputObject.scale.x, 0.0, 0.0, 0.0),
                vec4(0.0, inputObject.scale.y, 0.0, 0.0),
                vec4(0.0, 0.0, inputObject.scale.z, 0.0),
                vec4(inputObject.position.xyz, 1.0));
            modelMatrix = modelMatrix * inputObject.rotation; //apply rotation before translation  TODO ROTATION IS BROKEN BECAUSE IM A RETARD WHO DOESNT KNOW LINEAR ALGEBRA
            outputObjects.objects[writeIndex] = buildOutputObject(modelMatrix);
            
        }
    }
}