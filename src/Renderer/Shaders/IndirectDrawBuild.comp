#version 460

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require //for pointer arithmetic

layout (local_size_x = 128) in;

//----------GLOBAL INPUT DATA----------//

layout(std430, buffer_reference, buffer_reference_align = 8) PreprocessBufferReference;

struct CullingData
{
    vec4 frustum; //(left, right, top, bottom)
    vec2 zPlanes; //(near, far)
    vec2 padding;
};

layout(std430, set = 0, binding = 0) uniform InputData
{
    PreprocessBufferReference bufferReference;
    uint64_t padding;
    vec4 camPos;
    mat4 projection;
    mat4 view;
    CullingData cullingData;
    uint objectCount;
    
} inputData;

struct OBB
{
    float posX;
    float negX;
    float posY;
    float negY;
    float posZ;
    float negZ;
};

struct InputObject
{
    vec4 position; //w as padding
    vec4 scale;
    mat4 rotation;
    OBB bounds;
    uint lodCount;
    uint lodOffset;
};

layout(std430, set = 0, binding = 1) readonly buffer InputObjects
{
    InputObject objects[];
} inputObjects;

struct LODMesh
{
    uint vboOffset;
    uint vboSize;
    uint iboOffset;
    uint iboSize;

    uint drawCountsOffset;
    uint drawCommandsOffset;
    uint outputObjectsOffset;
    uint padding;
};

layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer LODMeshes
{
    LODMesh meshes[];
};

layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer LOD
{
    uint meshCount;
    uint meshesLocationOffset;
};

layout(std430, buffer_reference, buffer_reference_align = 8) buffer DrawCounts
{
    uint count;
};

struct DrawCommand //20 bytes
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer DrawCommands
{
    DrawCommand commands[];
};

struct OutputObject
{
    mat4 model;
    mat4 objectTransform;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer OutputObjects
{
    OutputObject objects[];
};

//----------FUNCTIONS----------//

bool isInBounds(InputObject object, mat4 modelMatrix)
{
    //grab bounding box
	OBB bounds = object.bounds;
    
    //construct 8 vertices
    vec3 vertices[8];
    vertices[0] = vec3(bounds.posX, bounds.posY, bounds.posZ);      // + + +
    vertices[1] = vec3(bounds.posX, bounds.posY, bounds.negZ);      // + + -
    vertices[2] = vec3(bounds.negX, bounds.posY, bounds.posZ);      // - + +
    vertices[3] = vec3(bounds.posX, bounds.negY, bounds.posZ);      // + - +
    vertices[4] = vec3(bounds.posX, bounds.negY, bounds.negZ);      // + - -
    vertices[5] = vec3(bounds.negX, bounds.posY, bounds.negZ);      // - + -
    vertices[6] = vec3(bounds.negX, bounds.negY, bounds.posZ);      // - - +
    vertices[7] = vec3(bounds.negX, bounds.negY, bounds.negZ);      // - - -
    

    //check if transformed vertices are inside frustum
    bool visible = false;
    for(int i = 0; i < 8; i++)
    {
        vertices[i] = (inputData.view * modelMatrix * vec4(vertices[i], 1.0)).xyz;

        bool vertexVisible = true;
        vertexVisible = vertexVisible && vertices[i].z * inputData.cullingData.frustum.y - abs(vertices[i].x) * inputData.cullingData.frustum.x > 0.0;
	    vertexVisible = vertexVisible && vertices[i].z * inputData.cullingData.frustum.w - abs(vertices[i].y) * inputData.cullingData.frustum.z > 0.0;

        visible = visible || vertexVisible;
    }

	return visible;
}

uint getLODLevel(InputObject object)
{
    float cameraDistance = length(object.position.xyz - inputData.camPos.xyz);
    float worldSize = 50.0;
    uint lodLevel = uint(floor(inversesqrt(worldSize) * sqrt(cameraDistance)));

    return lodLevel;
}

DrawCommand buildDrawCommand(LODMesh lodData, uint writeIndex)
{
    DrawCommand drawCommand;
    drawCommand.indexCount = lodData.iboSize;
    drawCommand.instanceCount = 1;
    drawCommand.firstIndex = lodData.iboOffset;
    drawCommand.vertexOffset = int(lodData.vboOffset);
    drawCommand.firstInstance = writeIndex;

    return drawCommand;
}

OutputObject buildOutputObject(mat4 modelMatrix)
{
    OutputObject outputObject;
    outputObject.model = modelMatrix;
    outputObject.objectTransform = inputData.projection * inputData.view * modelMatrix;

    return outputObject;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    InputObject inputObject = inputObjects.objects[gID];

    //transformation matrix
    mat4 modelMatrix = mat4(
        vec4(inputObject.scale.x, 0.0, 0.0, 0.0),
        vec4(0.0, inputObject.scale.y, 0.0, 0.0),
        vec4(0.0, 0.0, inputObject.scale.z, 0.0),
        vec4(inputObject.position.xyz, 1.0));
    modelMatrix = modelMatrix * inputObject.rotation;

    if(isInBounds(inputObject, modelMatrix))
    {   
        //get LOD
        uint lodLevel = min(getLODLevel(inputObject), inputObject.lodCount - 1);
        LOD lod = LOD(uint64_t(inputData.bufferReference) + inputObject.lodOffset + lodLevel * 8);
        LODMeshes meshesArray = LODMeshes(uint64_t(inputData.bufferReference) + lod.meshesLocationOffset);

        //loop through LOD meshes and create draw calls with counts
        for(uint i = 0; i < lod.meshCount; i++)
        {
            //draw counts and output objects
            DrawCounts drawCounts = DrawCounts(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].drawCountsOffset);
            DrawCommands outputCommands = DrawCommands(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].drawCommandsOffset);
            OutputObjects outputObjects = OutputObjects(uint64_t(inputData.bufferReference) + meshesArray.meshes[i].outputObjectsOffset);

            uint writeIndex = atomicAdd(drawCounts.count, 1);

            //draw commands
            outputCommands.commands[writeIndex] = buildDrawCommand(meshesArray.meshes[i], writeIndex);

            //output objects
            outputObjects.objects[writeIndex] = buildOutputObject(modelMatrix);
            
        }
    }
}