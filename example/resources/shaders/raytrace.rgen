#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"

layout(location = 0) rayPayloadEXT HitPayload hitPayload;

layout(set = 2, binding = 1, rgba32f) uniform image2D image;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = inverse(cameraData.view) * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = inverse(cameraData.projection) * vec4(d.x, d.y, 1.0, 1.0);
    vec4 mainRayDirection = inverse(cameraData.view) * vec4(normalize(target.xyz), 0.0);

    //initialize depth magic number and return color
    hitPayload.returnColor = vec3(0.0);
    hitPayload.depth = depthClearMagicNumber;
    

    //cast main RT ray; recursion will be used to solve the integral in chit shaders
    /*traceRayEXT(
        accelerationStructureEXT(inputData.tlasAddress), // acceleration structure
        gl_RayFlagsNoneEXT,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin.xyz,     // ray origin
        0.001,           // ray min range
        mainRayDirection.xyz,  // ray direction
        1000.0,           // ray max range
        0               // payload (location = 0)
    );*/

    //add total light depending on if depth is non-zero (aka hit)
    vec3 totalLight = vec3(0.0);
    if(hitPayload.depth != depthClearMagicNumber)
    {
        totalLight = hitPayload.returnColor;
    }
    else
    {
        //environment map
        totalLight = vec3(0.1, 0.1, 0.1);
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(totalLight, 1.0));
}
