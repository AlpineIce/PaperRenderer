#version 460

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require //for pointer arithmetic

layout (local_size_x = 128) in;

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer ASInstances;

layout(std430, set = 0, binding = 0) uniform InputData
{
    ASInstances asInstancesBufferReference;
    uint objectCount;
} inputData;

struct InputObject
{
    vec4 position;      
    mat4 rotation;      
    vec4 scale;         
    BLASReference blasReference;
};

layout(std430, set = 0, binding = 1) readonly buffer InputObjects
{
    InputObject objects[];
} inputObjects;

struct AccelerationStructureInstance
{
    mat3x4 transform;
    uint instanceCustomIndexAndMask;//24 + 8;
    uint instanceShaderBindingTableRecordOffsetAndFlags;//24 + 8;
    uint64_t accelerationStructureReference;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer ASInstances
{
    AccelerationStructureInstance objects[];
}; 

const uint VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x01000000;

AccelerationStructureInstance buildASInstance(InputObject object, uint customIndex)
{
    mat4 transformMatrix = mat4(
        vec4(object.scale.x, 0.0, 0.0, 0.0),
        vec4(0.0, object.scale.y, 0.0, 0.0),
        vec4(0.0, 0.0, object.scale.z, 0.0),
        vec4(0.0, 0.0, 0.0, 1.0));
    transformMatrix = inputData.view * transformMatrix * object.rotation; //apply rotation before translation  TODO ROTATION IS BROKEN BECAUSE IM A RETARD WHO DOESNT KNOW LINEAR ALGEBRA

    mat3x4 instTransform;
    instTransform[0] = vec4(transformMatrix[0].xyz, object.position.x);
    instTransform[1] = vec4(transformMatrix[1].xyz, object.position.y);
    instTransform[2] = vec4(transformMatrix[2].xyz, object.position.z);

    //I HAVE NO IDEA HOW WELL THIS CODE WILL ACTUALLY HOLD UP CONSIDERING I BARELY KNOW HOW TO USE BITWISE OPERATORS

    //custom index and mask
    uint instanceCustomIndex = customIndex;    // value to merge in non-masked bits
    uint mask = 0xAA000000;    // value to merge in masked bits
    uint bitmask0 = 0xFF000000; // 1 where bits from mask should be selected; 0 where from instanceCustomIndex.
    uint instanceCustomIndexAndMask = instanceCustomIndex ^ ((instanceCustomIndex ^ mask) & bitmask0);

    //binding table record offset and flags
    uint instanceShaderBindingTableRecordOffset = 0;    // value to merge in non-masked bits
    uint flags = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;    // value to merge in masked bits
    uint bitmask1 = 0xFF000000; // 1 where bits from flags should be selected; 0 where from instanceShaderBindingTableRecordOffset.
    uint instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffset ^ ((instanceShaderBindingTableRecordOffset ^ flags) & bitmask1);

    AccelerationStructureInstance structureInstance;
    structureInstance.transform = instTransform;
    structureInstance.instanceCustomIndexAndMask = instanceCustomIndexAndMask;
    structureInstance.instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffsetAndFlags;
    structureInstance.accelerationStructureReference = uint64_t(object.blasReference);

    return structureInstance;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    InputObject inputObject = inputObjects.objects[gID];

    ASInstances outputInstances = inputData.asInstancesBufferReference;
    outputInstances.objects[gID] = buildASInstance(inputObject, gID);

}