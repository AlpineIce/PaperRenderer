#version 460
#extension GL_GOOGLE_include_directive : require
#include "Common.glsl"

layout (local_size_x = 128) in;

//----------UNIFORM INPUT DATA----------//

layout(std430, set = 0, binding = 0) uniform InputData
{
    uint objectCount;
} inputData;

//----------INPUT INSTANCES----------// TODO

struct InputASInstance
{
    uint64_t blasReference;
    uint modelInstanceIndex;
    uint customIndexAndMask;
    uint recordOffsetAndFlags;
    uint padding;
};

layout(scalar, set = 2, binding = 0) readonly buffer InputASInstances
{
    InputASInstance instances[];
} inputASInstances;

//----------TLAS INSTANCE DATA----------//

struct AccelerationStructureInstance
{
    mat3x4 transform;
    uint instanceCustomIndexAndMask;//24 + 8;
    uint instanceShaderBindingTableRecordOffsetAndFlags;//24 + 8;
    uint64_t accelerationStructureReference;
};

layout(std430, set = 2, binding = 1) writeonly buffer ASInstances
{
    AccelerationStructureInstance objects[];
} asInstances; 

AccelerationStructureInstance buildASInstance(InputASInstance inputASInstance, ModelInstance modelInstance)
{
    //model matrix
    const mat3x4 modelMatrix = getModelMatrix(modelInstance);
    
    //AS instance
    AccelerationStructureInstance structureInstance;
    structureInstance.transform = modelMatrix;
    structureInstance.instanceCustomIndexAndMask = inputASInstance.customIndexAndMask;
    structureInstance.instanceShaderBindingTableRecordOffsetAndFlags = inputASInstance.recordOffsetAndFlags;
    structureInstance.accelerationStructureReference = uint64_t(inputASInstance.blasReference);

    return structureInstance;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    const InputASInstance inputASInstance = inputASInstances.instances[gID];
    const ModelInstance modelInstance = inputInstances.modelInstances[inputASInstance.modelInstanceIndex];
    
    asInstances.objects[inputASInstance.modelInstanceIndex] = buildASInstance(inputASInstance, modelInstance);
}