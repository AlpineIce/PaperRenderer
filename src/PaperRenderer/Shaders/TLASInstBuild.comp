#version 460
#extension GL_GOOGLE_include_directive : require
#include "Common.glsl"

layout (local_size_x = 128) in;

//----------UNIFORM INPUT DATA----------//

layout(std430, set = 0, binding = 0) uniform InputData
{
    uint objectCount;
} inputData;

//----------INPUT INSTANCES----------// TODO

struct InputASInstance
{
    uint64_t blasReference;
    uint selfIndex;
    uint modelInstanceIndex;
    uint mask;
    uint recordOffset;
    uint flags;
};

layout(scalar, set = 0, binding = 2) readonly buffer InputASInstances
{
    InputASInstance instances[];
} inputASInstances;

//----------TLAS INSTANCE DATA----------//

struct AccelerationStructureInstance
{
    mat3x4 transform;
    uint instanceCustomIndexAndMask;//24 + 8;
    uint instanceShaderBindingTableRecordOffsetAndFlags;//24 + 8;
    uint64_t accelerationStructureReference;
};

layout(std430, set = 0, binding = 3) writeonly buffer ASInstances
{
    AccelerationStructureInstance objects[];
} asInstances; 

AccelerationStructureInstance buildASInstance(InputASInstance inputASInstance, ModelInstance modelInstance)
{
    const mat4 modelMatrix = getModelMatrix(modelInstance);

    mat3x4 instTransform;
    instTransform[0].xyz = modelMatrix[0].xyz;
    instTransform[1].xyz = modelMatrix[1].xyz;
    instTransform[2].xyz = modelMatrix[2].xyz;
    instTransform[0][3] = modelMatrix[3][0];
    instTransform[1][3] = modelMatrix[3][1];
    instTransform[2][3] = modelMatrix[3][2];

    //bitmask for combining bits
    const uint bitmask = 0xFF000000;

    //custom index and mask
    uint instanceCustomIndex = inputASInstance.selfIndex;    // value to merge in non-masked bits
    uint mask = inputASInstance.mask;    // value to merge in masked bits
    uint instanceCustomIndexAndMask = instanceCustomIndex ^ ((instanceCustomIndex ^ mask) & bitmask);

    //binding table record offset and flags
    uint instanceShaderBindingTableRecordOffset = inputASInstance.recordOffset;    // value to merge in non-masked bits
    uint flags = inputASInstance.flags;    // value to merge in masked bits
    uint instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffset ^ ((instanceShaderBindingTableRecordOffset ^ flags) & bitmask);

    AccelerationStructureInstance structureInstance;
    structureInstance.transform = instTransform;
    structureInstance.instanceCustomIndexAndMask = instanceCustomIndexAndMask;
    structureInstance.instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffsetAndFlags;
    structureInstance.accelerationStructureReference = uint64_t(inputASInstance.blasReference);

    return structureInstance;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    const InputASInstance inputASInstance = inputASInstances.instances[gID];
    const ModelInstance modelInstance = inputInstances.modelInstances[inputASInstance.modelInstanceIndex];
    
    asInstances.objects[inputASInstance.modelInstanceIndex] = buildASInstance(inputASInstance, modelInstance);
}