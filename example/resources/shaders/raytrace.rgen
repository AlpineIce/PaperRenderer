#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"
#include "pbr.glsl"

layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT bool isShadowed;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 3, rgba32f) uniform image2D image;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = inverse(inputData.view) * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = inverse(inputData.projection) * vec4(d.x, d.y, 1.0, 1.0);
    vec4 mainRayDirection = inverse(inputData.view) * vec4(normalize(target.xyz), 0.0);

    //get camera position from view matrix
    const vec3 camPos = inverse(inputData.view)[3].xyz;

    uint mainRayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 1000.0;

    //initial RT
    traceRayEXT(topLevelAS, // acceleration structure
        mainRayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin.xyz,     // ray origin
        tMin,           // ray min range
        mainRayDirection.xyz,  // ray direction
        tMax,           // ray max range
        0               // payload (location = 0)
    );

    //solve integral at initial hit locatoin
    vec3 totalLight = vec3(0.0);
    const vec3 N = normalize(hitPayload.normal);
    const vec3 V = normalize(camPos.xyz - hitPayload.worldPosition);

    if(!hitPayload.isMiss)
    {
        //point lights
        for(uint i = 0; i < lightInfo.pointLightCount; i++)
        {
            const PointLight light = pointLights.lights[i];
            vec3 L = normalize(light.position.xyz - hitPayload.worldPosition);
            const vec3 H = normalize(V + L);

            //only do lighting calculations if light is "visible"
            if(dot(N, L) > 0.0)
            {
                //cast shadow ray
                isShadowed = true;
                float tMin = 0.001;
                float tMax = length(light.position.xyz - hitPayload.worldPosition);
                vec3 rayDir = L;
                uint shadowFlags =
                    gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
                
                traceRayEXT(topLevelAS,  // acceleration structure
                    shadowFlags,       // rayFlags
                    0xFF,        // cullMask
                    0,           // sbtRecordOffset
                    0,           // sbtRecordStride
                    1,           // missIndex
                    hitPayload.origin,      // ray origin
                    tMin,        // ray min range
                    rayDir,      // ray direction
                    tMax,        // ray max range
                    1            // payload (location = 1)
                );

                if(!isShadowed)
                {
                    totalLight += (dot(N, L) / 3.14) * light.color.xyz * (1.0 / (length(L) * length(L)));
                }
            }
        }

        //ambient light
        totalLight += lightInfo.ambientLight.xyz * lightInfo.ambientLight.w;
    }
    else
    {
        //environment map
        totalLight = vec3(0.0, 0.0, 0.0);
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(totalLight, 1.0));
}
