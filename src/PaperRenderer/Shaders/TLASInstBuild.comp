#version 460
#extension GL_GOOGLE_include_directive : require
#include "Common.glsl"

layout (local_size_x = 128) in;

//----------UNIFORM INPUT DATA----------//

layout(std430, set = 0, binding = 0) uniform InputData
{
    vec4 camPos;
    mat4 projection;
    mat4 view;
    uint64_t modelDataPtr;
    uint objectCount;
} inputData;

//----------INPUT INSTANCES----------// TODO

//----------TLAS INSTANCE DATA----------//

struct AccelerationStructureInstance
{
    mat3x4 transform;
    uint instanceCustomIndexAndMask;//24 + 8;
    uint instanceShaderBindingTableRecordOffsetAndFlags;//24 + 8;
    uint64_t accelerationStructureReference;
};

layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer ASInstances
{
    AccelerationStructureInstance objects[];
}; 

const uint VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x01000000;

AccelerationStructureInstance buildASInstance(InputObject object, uint customIndex)
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }

    ModelInstance modelInstance = inputInstances.modelInstances[inputInstance.modelInstanceIndex]; //should be at index 0 with the offset derrived from inputInstance
    Model model = InputModel(inputData.modelDataPtr + modelInstance.modelDataOffset).model; //should be at index 0 with the offset derrived from modelInstance
    mat4 modelMatrix = getModelMatrix(modelInstance);

    mat3x4 instTransform;
    instTransform[0] = modelMatrix[0];
    instTransform[1] = modelMatrix[1];
    instTransform[2] = modelMatrix[2];

    //custom index and mask
    uint instanceCustomIndex = customIndex;    // value to merge in non-masked bits
    uint mask = 0xAA000000;    // value to merge in masked bits
    uint bitmask0 = 0xFF000000; // 1 where bits from mask should be selected; 0 where from instanceCustomIndex.
    uint instanceCustomIndexAndMask = instanceCustomIndex ^ ((instanceCustomIndex ^ mask) & bitmask0);

    //binding table record offset and flags
    uint instanceShaderBindingTableRecordOffset = 0;    // value to merge in non-masked bits
    uint flags = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;    // value to merge in masked bits
    uint bitmask1 = 0xFF000000; // 1 where bits from flags should be selected; 0 where from instanceShaderBindingTableRecordOffset.
    uint instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffset ^ ((instanceShaderBindingTableRecordOffset ^ flags) & bitmask1);

    AccelerationStructureInstance structureInstance;
    structureInstance.transform = instTransform;
    structureInstance.instanceCustomIndexAndMask = instanceCustomIndexAndMask;
    structureInstance.instanceShaderBindingTableRecordOffsetAndFlags = instanceShaderBindingTableRecordOffsetAndFlags;
    structureInstance.accelerationStructureReference = uint64_t(object.blasReference);

    return structureInstance;
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;
    if(gID >= inputData.objectCount)
    {
        return;
    }
    InputObject inputObject = inputObjects.objects[gID];

    ASInstances outputInstances = inputData.asInstancesBufferReference;
    outputInstances.objects[gID] = buildASInstance(inputObject, gID);

}